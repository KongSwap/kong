type ArchiveOptions = record {
  num_blocks_to_archive : nat64;
  max_transactions_per_response : opt nat64;
  trigger_threshold : nat64;
  more_controller_ids : opt vec principal;
  max_message_size_bytes : opt nat64;
  cycles_for_archive_creation : opt nat64;
  node_max_memory_size_bytes : opt nat64;
  controller_id : principal;
};
type BlockTemplate = record {
  height : nat64;
  difficulty : nat32;
  prev_hash : blob;
  version : nat32;
  merkle_root : blob;
  target : blob;
  events : vec Event;
  nonce : nat64;
  timestamp : nat64;
};
type BlockTimeResult = variant { Ok : float64; Err : text };
type ConsentMessageRequest = record {
  arg : blob;
  method : text;
  consent_preferences : ConsentPreferences;
};
type ConsentMessageResponse = variant {
  Ok : record { consent_message : text; language : text };
  Err : record { error_message : text; error_code : nat32 };
};
type ConsentPreferences = record { language : text };
type DelegationError = variant {
  InvalidExpiry : record { max : nat64; provided : nat64; current : nat64 };
  Anonymous;
  SystemError : text;
  Unauthorized : text;
  RateLimitExceeded : record { next_allowed : nat64 };
  InvalidDelegationId : record { provided : blob; expected : blob };
};
type DelegationRequest = record { delegatee : principal; expiry : nat64 };
type DelegationResponse = variant {
  Ok : record { expiry : nat64; delegation_id : blob };
  Err : record { error_message : text; error_code : nat32 };
};
type Event = record {
  timestamp : nat64;
  block_height : nat64;
  event_type : EventType;
};
type EventBatch = record {
  events : vec Event;
  timestamp : nat64;
  block_height : nat64;
};
type EventType = variant {
  DifficultyAdjustment : record {
    old_difficulty : nat32;
    new_difficulty : nat32;
    reason : text;
  };
  VersionUpgrade : record { new_version : text; features : vec text };
  Achievement : record { miner : principal; name : text; description : text };
  RewardHalving : record { block_height : nat64; new_reward : nat64 };
  SystemAnnouncement : record { message : text; severity : text };
  MiningMilestone : record {
    miner : principal;
    blocks_mined : nat64;
    achievement : text;
  };
  LeaderboardUpdate : record {
    miner : principal;
    total_mined : nat64;
    position : nat32;
  };
  MiningCompetition : record {
    winner : principal;
    prize : nat64;
    competition_id : text;
  };
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type MetricsResult = variant { Ok : TokenMetrics; Err : text };
type MinerInfo = record {
  status : MinerStatus;
  "principal" : principal;
  registration_time : nat64;
  stats : MinerStats;
  last_status_change : nat64;
};
type MinerStats = record {
  average_hashrate : float64;
  blocks_mined : nat64;
  best_hashrate : float64;
  first_block_timestamp : opt nat64;
  total_rewards : nat64;
  last_hashrate_update : opt nat64;
  total_hashes_processed : nat64;
  last_block_timestamp : opt nat64;
  hashrate_samples : vec record { nat64; float64 };
  current_hashrate : float64;
};
type MinerStatus = variant { Inactive; Active };
type MiningInfo = record {
  next_difficulty_adjustment : nat64;
  block_time_target : nat64;
  current_difficulty : nat32;
  current_block_reward : nat64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : BlockTemplate; Err : text };
type Result_2 = variant { Ok : TokenInfo; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_4 = variant { Ok : DelegationResponse; Err : DelegationError };
type Result_5 = variant { Ok : principal; Err : text };
type Result_6 = variant { Ok : bool; Err : text };
type SupportedStandard = record { url : text; name : text };
type TokenInfo = record {
  decimals : nat8;
  ticker : text;
  transfer_fee : nat64;
  logo : opt text;
  name : text;
  ledger_id : opt principal;
  archive_options : opt ArchiveOptions;
  total_supply : nat64;
};
type TokenInitArgs = record {
  decimals : opt nat8;
  initial_block_reward : nat64;
  ticker : text;
  block_time_target_seconds : nat64;
  transfer_fee : opt nat64;
  logo : opt text;
  name : text;
  archive_options : opt ArchiveOptions;
  halving_interval : nat64;
  total_supply : nat64;
};
type TokenMetrics = record { circulating_supply : nat64; total_supply : nat64 };
type TrustedOriginsResponse = record { trusted_origins : vec text };
service : (TokenInitArgs) -> {
  cleanup_expired_delegations : () -> (nat64);
  deregister_miner : () -> (Result);
  generate_new_block : () -> (Result_1);
  get_active_miners : () -> (vec principal) query;
  get_auth_status : () -> (bool) query;
  get_average_block_time : (opt nat32) -> (BlockTimeResult) query;
  get_block_time_target : () -> (nat64) query;
  get_current_block : () -> (opt BlockTemplate) query;
  get_event_batches : (opt nat64) -> (vec EventBatch) query;
  get_info : () -> (Result_2) query;
  get_metrics : () -> (MetricsResult) query;
  get_miner_leaderboard : (opt nat32) -> (vec MinerInfo) query;
  get_miner_stats : (principal) -> (opt MinerInfo) query;
  get_miners : () -> (vec MinerInfo) query;
  get_mining_difficulty : () -> (nat32) query;
  get_mining_info : () -> (MiningInfo) query;
  get_recent_events : (opt nat32) -> (vec Event) query;
  get_recent_events_from_batches : (opt nat32) -> (vec Event) query;
  get_target : () -> (Result_3) query;
  get_total_cycles_earned : () -> (nat) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc21_consent_message : (ConsentMessageRequest) -> (ConsentMessageResponse);
  icrc28_trusted_origins : () -> (TrustedOriginsResponse) query;
  icrc34_delegate : (DelegationRequest) -> (Result_4);
  register_miner : () -> (Result);
  set_block_time_target : (nat64) -> (nat64);
  start_token : () -> (Result_5);
  submit_solution : (principal, nat64, blob, nat64) -> (Result_6);
  whoami : () -> (principal) query;
}
