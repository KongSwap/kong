type CycleMeasurement = record { balance : nat; timestamp : nat64 };
type CycleUsageStats = record {
  current_balance : nat;
  usage_last_15min : opt nat;
  measurements : vec CycleMeasurement;
  estimated_remaining_time : opt text;
  usage_rate_per_hour : opt float64;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type MinerInfo = record {
  speed_percentage : nat8;
  icrc_version : nat16;
  current_token : opt principal;
  chunks_per_refresh : nat64;
  chunk_size : nat64;
  is_mining : bool;
};
type MiningStats = record {
  total_hashes : nat64;
  blocks_mined : nat64;
  chunks_since_refresh : nat64;
  total_rewards : nat64;
  last_hash_rate : float64;
  start_time : nat64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec record { principal; Result }; Err : text };
type Result_2 = variant { Ok : MinerInfo; Err : text };
type TransformArgs = record { context : blob; response : HttpResponse };
service : (record {}) -> {
  check_api_config : () -> (bool, opt text) query;
  claim_all_rewards : () -> (Result_1);
  claim_rewards : () -> (Result);
  claim_token_rewards : (principal) -> (Result);
  connect_token : (principal) -> (Result);
  disable_api_notifications : () -> (Result);
  disconnect_token : () -> (Result);
  enable_api_notifications : () -> (Result);
  get_canister_id : () -> (principal) query;
  get_cycle_usage : () -> (CycleUsageStats) query;
  get_info : () -> (Result_2) query;
  get_mining_stats : () -> (opt MiningStats) query;
  get_token_rewards : () -> (vec record { principal; nat64 }) query;
  icrc1_version : () -> (nat16) query;
  set_api_endpoint : (text, text) -> (Result);
  set_chunk_size : (nat64) -> (Result);
  set_chunks_per_refresh : (nat64) -> ();
  set_max_chunk_duration : (nat64) -> ();
  set_mining_speed : (nat8) -> (Result);
  set_template_refresh_interval : (nat64) -> (Result);
  start_mining : () -> (Result);
  stop_mining : () -> (Result);
  transform_http_response : (TransformArgs) -> (HttpResponse) query;
}
