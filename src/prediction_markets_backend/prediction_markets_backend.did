// Prediction Markets Candid Interface

// ICRC-21 Types
type ICRC21ConsentMessageRequest = record {
    canister : principal;
    method : text;
};

type ICRC21ConsentMessageResponse = record {
    consent_message : text;
};

// ICRC-34 Types
type DelegationError = variant {
    InvalidRequest : text;
    Expired;
    NotFound;
    StorageError : text;
    Unauthorized;
};

type DelegationRequest = record {
    targets : vec principal;
    expiration : opt nat64;
};

type Delegation = record {
    target : principal;
    created : nat64;
    expiration : opt nat64;
    targets_list_hash : vec nat8;
};

type DelegationResponse = record {
    delegations : vec Delegation;
};

type RevokeDelegationRequest = record {
    targets : vec principal;
};

// Type definitions
type MarketId = nat;
type Timestamp = nat;

type MarketCategory = variant {
    Crypto;
    Memes;
    Sports;
    Politics;
    KongMadness;
    AI;
    Other;
};

type Market = record {
    id : MarketId;
    creator : principal;
    question : text;
    category : MarketCategory;
    outcomes : vec text;
    resolution_method : ResolutionMethod;
    status : MarketStatus;
    created_at : Timestamp;
    end_time : Timestamp;
    total_pool : nat;
    resolution_data : opt text;
    outcome_pools : vec nat;      // Amount in pool for each outcome
    outcome_percentages : vec float64;  // Percentage of total pool for each outcome
    bet_counts : vec nat;        // Number of bets for each outcome
    bet_count_percentages : vec float64;  // Percentage of total bets for each outcome
    resolved_by : opt principal;  // Principal ID of the admin who resolved the market
};

type ResolutionMethod = variant {
    Admin;
    Oracle : record {
        oracle_principals : vec principal;
        required_confirmations : nat;
    };
    Decentralized : record {
        quorum : nat;
    };
};

type MarketStatus = variant {
    Open;
    Closed : vec nat;
    Disputed;
};

type Bet = record {
    user : principal;
    market_id : MarketId;
    amount : nat;
    outcome_index : nat;
    timestamp : Timestamp;
};

type BetError = variant {
    MarketNotFound;
    MarketClosed;
    InvalidOutcome;
    InsufficientBalance;
    BalanceUpdateFailed;
    MarketUpdateFailed;
    BetRecordingFailed;
    TransferError : text;
};

type ResolutionError = variant {
    Unauthorized;
    MarketNotFound;
    InvalidMethod;
    MarketStillOpen;  // Market's end time has not been reached yet
    AlreadyResolved;
    InvalidOutcome;
    UpdateFailed;
    PayoutFailed;
};

type MarketEndTime = variant {
    Duration : nat;     // Duration in seconds from creation
    SpecificDate : nat; // Unix timestamp for end date
};

type Distribution = record {
    user : principal;
    outcome_index : nat;
    bet_amount : nat;
    winnings : nat;
};

type MarketResult = record {
    market : Market;
    winning_outcomes : vec nat;
    total_pool : nat;
    winning_pool : nat;
    outcome_pools : vec nat;  // Amount in pool for each outcome
    outcome_percentages : vec float64;  // Percentage of total pool for each outcome
    bet_counts : vec nat;  // Number of bets for each outcome
    bet_count_percentages : vec float64;  // Percentage of total bets for each outcome
    distributions : vec Distribution;
};

type MarketsByStatus = record {
    active : vec Market;
    expired_unresolved : vec Market;
    resolved : vec MarketResult;
};

type UserBetInfo = record {
    market : Market;
    bet_amount : nat;
    outcome_index : nat;
    outcome_text : text;
    winnings : opt nat;
};

type UserHistory = record {
    active_bets : vec UserBetInfo;
    pending_resolution : vec UserBetInfo;
    resolved_bets : vec UserBetInfo;
    total_wagered : nat;
    total_won : nat;
    current_balance : nat;
};

type GetFeeBalanceResult = record {
    admin_principal: principal;
    balance: nat;
};

// Admin types
type AdminError = variant {
    Unauthorized;
    NotFound;
    LastAdmin;
};

service : {
    // Admin management
    is_admin : (principal) -> (bool) query;
    get_admin_principals : () -> (vec principal) query;
    add_admin : (principal) -> (variant { Ok; Err : text });
    remove_admin : (principal) -> (variant { Ok; Err : text });

    // ICRC-21 endpoint
    icrc21_canister_call_consent_message : (ICRC21ConsentMessageRequest) -> (ICRC21ConsentMessageResponse) query;

    // ICRC-34 endpoints
    icrc_34_get_delegation : (DelegationRequest) -> (variant { Ok: DelegationResponse; Err: DelegationError }) query;
    icrc_34_delegate : (DelegationRequest) -> (variant { Ok: DelegationResponse; Err: DelegationError });
    icrc_34_revoke_delegation : (RevokeDelegationRequest) -> (variant { Ok; Err: DelegationError });

    get_fee_balance : () -> (GetFeeBalanceResult) query;
    // Market creation
    create_market : (
        question : text,
        category : MarketCategory,
        rules : text,
        outcomes : vec text,
        resolution_method : ResolutionMethod,
        end_time_spec : MarketEndTime
    ) -> (variant { Ok : MarketId; Err : text });

    // Betting
    place_bet : (
        market_id : MarketId,
        outcome_index : nat,
        amount : nat
    ) -> (variant { Ok; Err : BetError });

    // Token management
    get_balance : (user : principal) -> (nat) query;

    // Market resolution
    resolve_via_admin : (
        market_id : MarketId,
        outcome_indices : vec nat
    ) -> (variant { Ok; Err : ResolutionError });

    resolve_via_oracle : (
        market_id : MarketId,
        outcome_indices : vec nat,
        signature : vec nat8
    ) -> (variant { Ok; Err : ResolutionError });

    // Query methods
    get_market : (market_id : MarketId) -> (opt Market) query;
    get_all_markets : () -> (vec Market) query;
    get_market_bets : (market_id : MarketId) -> (vec Bet) query;
    get_markets_by_status : () -> (MarketsByStatus) query;
    get_user_history : (user : principal) -> (UserHistory) query;
};

