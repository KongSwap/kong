type BatchClaimResult = record {
  claimed_amounts : vec record { text; nat };
  transaction_ids : vec record { nat64; nat };
  failure_count : nat64;
  results : vec ClaimResult;
  success_count : nat64;
};
type Bet = record {
  market_id : nat;
  user : principal;
  timestamp : nat;
  amount : nat;
  outcome_index : nat;
};
type BetDistributionDetail = record {
  weighted_contribution : opt float64;
  bet_amount : nat;
  bonus_amount : nat;
  time_weight : opt float64;
  claim_id : opt nat64;
  total_payout : nat;
  user : principal;
  outcome_index : nat;
};
type BetError = variant {
  MarketNotFound;
  MarketClosed;
  BetRecordingFailed;
  TransferError : text;
  MarketUpdateFailed;
  InvalidOutcome;
  InsufficientBalance;
  BalanceUpdateFailed;
};
type ConsentInfo = record {
  metadata : ConsentMessageMetadata;
  consent_message : ConsentMessage;
};
type ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec LineDisplayPage };
  GenericDisplayMessage : text;
};
type ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : ConsentMessageSpec;
};
type ConsentMessageSpec = record {
  metadata : ConsentMessageMetadata;
  device_spec : opt DisplayMessageType;
};
type Delegation = record {
  created : nat64;
  targets_list_hash : blob;
  target : principal;
  expiration : opt nat64;
};
type DelegationError = variant {
  NotFound;
  Unauthorized;
  InvalidRequest : text;
  StorageError : text;
  Expired;
};
type DelegationRequest = record {
  targets : vec principal;
  expiration : opt nat64;
};
type DelegationResponse = record { delegations : vec Delegation };
type DisplayMessageType = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type Distribution = record {
  bet_amount : nat;
  winnings : nat;
  user : principal;
  outcome_index : nat;
};
type ErrorInfo = record { description : text };

  start : nat;
  length : nat;
  sort_option : opt SortOption;
};

type GetMarketsByStatusResult = record {
  total_active : nat;
  total_resolved : nat;
  total_expired_unresolved : nat;
  markets_by_status : MarketsByStatus;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type LineDisplayPage = record { lines : vec text };
type Market = record {
  id : nat;
  bet_count_percentages : vec float64;
  status : MarketStatus;
  outcome_pools : vec nat;
  creator : principal;
  featured : bool;
  outcome_percentages : vec float64;
  question : text;
  image_url : opt text;
  resolution_data : opt text;
  created_at : nat;
  end_time : nat;
  total_pool : nat;
  outcomes : vec text;
  resolution_method : ResolutionMethod;
  category : MarketCategory;
  rules : text;
  resolved_by : opt principal;
  bet_counts : vec nat;
};
type MarketCategory = variant {
  AI;
  Memes;
  Crypto;
  Other;
  Politics;
  KongMadness;
  Sports;
};
type MarketEndTime = variant { SpecificDate : nat; Duration : nat };
type MarketResolutionDetails = record {
  total_transfer_fees : nat;
  total_winning_pool : nat;
  total_market_pool : nat;
  platform_fee_amount : nat;
  token_id : text;
  token_symbol : text;
  failed_transactions : vec FailedTransactionInfo;
  market_id : nat;
  total_weighted_contribution : opt float64;
  platform_fee_percentage : nat64;
  used_time_weighting : bool;
  distribution_details : vec BetDistributionDetail;
  resolution_timestamp : nat;
  time_weight_alpha : opt float64;
  winning_bet_count : nat64;
  winning_outcomes : vec nat;
  distributable_profit : nat;
  fee_transaction_id : opt nat64;
  total_profit : nat;
};
type MarketResult = record {
  bet_count_percentages : vec float64;
  outcome_pools : vec nat;
  outcome_percentages : vec float64;
  winning_pool : nat;
  distributions : vec Distribution;
  total_pool : nat;
  market : Market;
  winning_outcomes : vec nat;
  bet_counts : vec nat;
};
type MarketStatus = variant { Disputed; Open; Closed : vec nat; Voided };
type MarketsByStatus = record {
  resolved : vec MarketResult;
  active : vec Market;
  expired_unresolved : vec Market;
};
type ProcessDetails = record { transaction_id : opt nat; timestamp : nat };
type RefundReason = variant {
  Disputed;
  TransactionFailed;
  Other : text;
  VoidedMarket;
};
type ResolutionError = variant {
  MarketNotFound;
  MarketStillOpen;
  TransferError : text;
  InvalidOutcome;
  InvalidMethod;
  AlreadyResolved;
  Unauthorized;
  UpdateFailed;
  PayoutFailed;
  VoidingFailed;
};
type ResolutionMethod = variant {
  Oracle : record {
    oracle_principals : vec principal;
    required_confirmations : nat;
  };
  Decentralized : record { quorum : nat };
  Admin;
};

type SortDirection = variant { Descending; Ascending };
type SortOption = variant {
  TotalPool : SortDirection;
  CreatedAt : SortDirection;
};
type StatsResult = record {
  total_bets : nat;
  total_active_markets : nat;
  total_markets : nat;
};
type UserBetInfo = record {
  outcome_text : text;
  bet_amount : nat;
  winnings : opt nat;
  market : Market;
  outcome_index : nat;
};
type UserHistory = record {
  pending_resolution : vec UserBetInfo;
  total_wagered : nat;
  current_balance : nat;
  total_won : nat;
  active_bets : vec UserBetInfo;
  resolved_bets : vec UserBetInfo;
};
service : () -> {
  create_market : (
      text,
      MarketCategory,
      text,
      vec text,
      ResolutionMethod,
      MarketEndTime,
      opt text,

  get_user_history : (principal) -> (UserHistory) query;
  get_user_pending_claims : () -> (vec ClaimRecord) query;
  icrc21_canister_call_consent_message : (ConsentMessageRequest) -> (
      Result_1,
    ) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icrc_34_delegate : (DelegationRequest) -> (Result_2);
  icrc_34_get_delegation : (DelegationRequest) -> (Result_2) query;
  icrc_34_revoke_delegation : (RevokeDelegationRequest) -> (Result_3);
  is_admin : (principal) -> (bool) query;
}
