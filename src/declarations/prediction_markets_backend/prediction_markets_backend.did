type Bet = record {
  token_id : text;
  market_id : nat;
  user : principal;
  timestamp : nat;
  amount : nat;
  outcome_index : nat;
};
type BetError = variant {
  MarketNotFound;
  InsufficientActivationBet;
  MarketClosed;
  BetRecordingFailed;
  NotMarketCreator;
  InvalidMarketStatus;
  TransferError : text;
  MarketUpdateFailed;
  InvalidOutcome;
  MarketNotActive;
  InsufficientBalance;
  BalanceUpdateFailed;
};
type BetPayoutRecord = record {
  transaction_id : opt nat;
  bet_amount : nat;
  bonus_amount : opt nat;
  time_weight : opt float64;
  platform_fee_amount : opt nat;
  token_id : text;
  token_symbol : text;
  market_id : nat;
  platform_fee_percentage : nat64;
  user : principal;
  payout_amount : nat;
  original_contribution_returned : nat;
  timestamp : nat;
  was_time_weighted : bool;
  outcome_index : nat;
};
type ConsentInfo = record {
  metadata : ConsentMessageMetadata;
  consent_message : ConsentMessage;
};
type ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec LineDisplayPage };
  GenericDisplayMessage : text;
};
type ConsentMessageMetadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : ConsentMessageSpec;
};
type ConsentMessageSpec = record {
  metadata : ConsentMessageMetadata;
  device_spec : opt DisplayMessageType;
};
type Delegation = record {
  created : nat64;
  targets_list_hash : blob;
  target : principal;
  expiration : opt nat64;
};
type DelegationError = variant {
  NotFound;
  Unauthorized;
  InvalidRequest : text;
  StorageError : text;
  Expired;
};
type DelegationRequest = record {
  targets : vec principal;
  expiration : opt nat64;
};
type DelegationResponse = record { delegations : vec Delegation };
type DisplayMessageType = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type Distribution = record {
  bet_amount : nat;
  winnings : nat;
  user : principal;
  outcome_index : nat;
};
type ErrorInfo = record { description : text };
type EstimatedReturn = record {
  bet_amount : nat;
  uses_time_weighting : bool;
  current_outcome_pool : nat;
  estimated_platform_fee : opt nat;
  current_market_pool : nat;
  market_id : nat;
  platform_fee_percentage : opt nat64;
  scenarios : vec EstimatedReturnScenario;
  time_weight_alpha : opt float64;
  current_time : nat;
  outcome_index : nat;
};
type EstimatedReturnScenario = record {
  probability : float64;
  max_return : nat;
  time_weight : opt float64;
  time_weighted : bool;
  min_return : nat;
  expected_return : nat;
  scenario : text;
};
type GetAllMarketsArgs = record {
  status_filter : opt MarketStatus;
  start : nat;
  length : nat64;
  sort_option : opt SortOption;
};
type GetAllMarketsResult = record { markets : vec Market; total_count : nat };
type GetMarketsByStatusArgs = record { start : nat; length : nat };
type GetMarketsByStatusResult = record {
  total_active : nat;
  total_resolved : nat;
  total_expired_unresolved : nat;
  markets_by_status : MarketsByStatus;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type LineDisplayPage = record { lines : vec text };
type Market = record {
  id : nat;
  bet_count_percentages : vec float64;
  status : MarketStatus;
  outcome_pools : vec nat;
  uses_time_weighting : bool;
  creator : principal;
  outcome_percentages : vec float64;
  question : text;
  token_id : text;
  image_url : opt text;
  resolution_data : opt text;
  created_at : nat;
  end_time : nat;
  total_pool : nat;
  outcomes : vec text;
  resolution_method : ResolutionMethod;
  time_weight_alpha : opt float64;
  category : MarketCategory;
  rules : text;
  resolved_by : opt principal;
  bet_counts : vec nat;
};
type MarketCategory = variant {
  AI;
  Memes;
  Crypto;
  Other;
  Politics;
  KongMadness;
  Sports;
};
type MarketEndTime = variant { SpecificDate : nat; Duration : nat };
type MarketResult = record {
  bet_count_percentages : vec float64;
  outcome_pools : vec nat;
  outcome_percentages : vec float64;
  winning_pool : nat;
  distributions : vec Distribution;
  total_pool : nat;
  market : Market;
  winning_outcomes : vec nat;
  bet_counts : vec nat;
};
type MarketStatus = variant {
  Disputed;
  Closed : vec nat;
  Active;
  Voided;
  Pending;
};
type MarketsByStatus = record {
  resolved : vec MarketResult;
  active : vec Market;
  expired_unresolved : vec Market;
};
type ResolutionError = variant {
  MarketNotFound;
  MarketStillOpen;
  InvalidMarketStatus;
  TransferError : text;
  AwaitingAdminApproval;
  InvalidOutcome;
  InvalidMethod;
  AlreadyResolved;
  ResolutionMismatch;
  Unauthorized;
  AwaitingCreatorApproval;
  UpdateFailed;
  PayoutFailed;
  VoidingFailed;
  ResolutionDisagreement;
};
type ResolutionMethod = variant {
  Oracle : record {
    oracle_principals : vec principal;
    required_confirmations : nat;
  };
  Decentralized : record { quorum : nat };
  Admin;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok; Err : ResolutionError };
type Result_3 = variant { Ok : ConsentInfo; Err : ErrorInfo };
type Result_4 = variant { Ok : DelegationResponse; Err : DelegationError };
type Result_5 = variant { Ok; Err : DelegationError };
type Result_6 = variant { Ok; Err : BetError };
type RevokeDelegationRequest = record { targets : vec principal };
type SortDirection = variant { Descending; Ascending };
type SortOption = variant {
  TotalPool : SortDirection;
  CreatedAt : SortDirection;
};
type StatsResult = record {
  total_bets : nat;
  total_active_markets : nat;
  total_markets : nat;
};
type TimeWeightPoint = record {
  weight : float64;
  absolute_time : nat;
  relative_time : float64;
};
type TokenInfo = record {
  id : text;
  is_kong : bool;
  decimals : nat8;
  transfer_fee : nat;
  name : text;
  fee_percentage : nat64;
  symbol : text;
};
type UserBetInfo = record {
  outcome_text : text;
  bet_amount : nat;
  winnings : opt nat;
  market : Market;
  outcome_index : nat;
};
type UserHistory = record {
  pending_resolution : vec UserBetInfo;
  total_wagered : nat;
  current_balance : nat;
  total_won : nat;
  active_bets : vec UserBetInfo;
  resolved_bets : vec UserBetInfo;
};
service : () -> {
  add_supported_token : (TokenInfo) -> (Result);
  create_market : (
      text,
      MarketCategory,
      text,
      vec text,
      ResolutionMethod,
      MarketEndTime,
      opt text,
      opt bool,
      opt float64,
      opt text,
    ) -> (Result_1);
  estimate_bet_return : (nat64, nat64, nat64, nat64, opt text) -> (
      EstimatedReturn,
    ) query;
  force_resolve_market : (nat, vec nat) -> (Result_2);
  generate_time_weight_curve : (nat64, nat64) -> (vec TimeWeightPoint) query;
  get_all_categories : () -> (vec text) query;
  get_all_markets : (GetAllMarketsArgs) -> (GetAllMarketsResult) query;
  get_market : (nat) -> (opt Market) query;
  get_market_bets : (nat) -> (vec Bet) query;
  get_market_payout_records : (nat64) -> (vec BetPayoutRecord) query;
  get_markets_by_status : (GetMarketsByStatusArgs) -> (
      GetMarketsByStatusResult,
    ) query;
  get_stats : () -> (StatsResult) query;
  get_supported_tokens : () -> (vec TokenInfo) query;
  get_token_fee_percentage : (text) -> (opt nat64) query;
  get_user_history : (principal) -> (UserHistory) query;
  icrc21_canister_call_consent_message : (ConsentMessageRequest) -> (
      Result_3,
    ) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icrc_34_delegate : (DelegationRequest) -> (Result_4);
  icrc_34_get_delegation : (DelegationRequest) -> (Result_4) query;
  icrc_34_revoke_delegation : (RevokeDelegationRequest) -> (Result_5);
  is_admin : (principal) -> (bool) query;
  place_bet : (nat, nat, nat, opt text) -> (Result_6);
  propose_resolution : (nat, vec nat) -> (Result_2);
  resolve_via_admin : (nat, vec nat) -> (Result_2);
  resolve_via_oracle : (nat, vec nat, blob) -> (Result_2);
  simulate_future_weight : (nat64, nat64, nat64) -> (float64) query;
  update_token_config : (text, TokenInfo) -> (Result);
  void_market : (nat) -> (Result_2);
}
