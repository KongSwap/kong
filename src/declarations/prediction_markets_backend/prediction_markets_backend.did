type Bet = record {
  market_id : nat;
  user : principal;
  timestamp : nat;
  amount : nat;
  outcome_index : nat;
};
type BetError = variant {
  MarketNotFound;
  MarketClosed;
  BetRecordingFailed;
  TransferError : text;
  MarketUpdateFailed;
  InvalidOutcome;
  InsufficientBalance;
  BalanceUpdateFailed;
};
type BetWithMarket = record { bet : Bet; market : Market };
type Delegation = record {
  created : nat64;
  targets_list_hash : blob;
  target : principal;
  expiration : opt nat64;
};
type DelegationError = variant {
  NotFound;
  Unauthorized;
  InvalidRequest : text;
  StorageError : text;
  Expired;
};
type DelegationRequest = record {
  targets : vec principal;
  expiration : opt nat64;
};
type DelegationResponse = record { delegations : vec Delegation };
type Distribution = record {
  bet_amount : nat;
  winnings : nat;
  user : principal;
  outcome_index : nat;
};
type GetFeeBalanceResult = record {
  balance : nat;
  admin_principal : principal;
};
type ICRC21ConsentMessageRequest = record {
  method : text;
  canister : principal;
};
type ICRC21ConsentMessageResponse = record { consent_message : text };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type Market = record {
  id : nat;
  bet_count_percentages : vec float64;
  status : MarketStatus;
  outcome_pools : vec nat;
  creator : principal;
  outcome_percentages : vec float64;
  question : text;
  resolution_data : opt text;
  created_at : nat;
  end_time : nat;
  total_pool : nat;
  outcomes : vec text;
  resolution_method : ResolutionMethod;
  category : MarketCategory;
  rules : text;
  resolved_by : opt principal;
  bet_counts : vec nat;
};
type MarketCategory = variant {
  AI;
  Memes;
  Crypto;
  Other;
  Politics;
  KongMadness;
  Sports;
};
type MarketEndTime = variant { SpecificDate : nat; Duration : nat };
type MarketResult = record {
  bet_count_percentages : vec float64;
  outcome_pools : vec nat;
  outcome_percentages : vec float64;
  winning_pool : nat;
  distributions : vec Distribution;
  total_pool : nat;
  market : Market;
  winning_outcomes : vec nat;
  bet_counts : vec nat;
};
type MarketStatus = variant { Disputed; Open; Closed : vec nat };
type MarketsByStatus = record {
  resolved : vec MarketResult;
  active : vec Market;
  expired_unresolved : vec Market;
};
type ResolutionError = variant {
  MarketNotFound;
  MarketStillOpen;
  TransferError : text;
  InvalidOutcome;
  InvalidMethod;
  AlreadyResolved;
  Unauthorized;
  UpdateFailed;
  PayoutFailed;
};
type ResolutionMethod = variant {
  Oracle : record {
    oracle_principals : vec principal;
    required_confirmations : nat;
  };
  Decentralized : record { quorum : nat };
  Admin;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : DelegationResponse; Err : DelegationError };
type Result_3 = variant { Ok; Err : DelegationError };
type Result_4 = variant { Ok; Err : BetError };
type Result_5 = variant { Ok; Err : ResolutionError };
type RevokeDelegationRequest = record { targets : vec principal };
type UserBetInfo = record {
  outcome_text : text;
  bet_amount : nat;
  winnings : opt nat;
  market : Market;
  outcome_index : nat;
};
type UserHistory = record {
  pending_resolution : vec UserBetInfo;
  total_wagered : nat;
  current_balance : nat;
  total_won : nat;
  active_bets : vec UserBetInfo;
  resolved_bets : vec UserBetInfo;
};
service : {
  add_admin : (principal) -> (Result);
  create_market : (
      text,
      MarketCategory,
      text,
      vec text,
      ResolutionMethod,
      MarketEndTime,
    ) -> (Result_1);
  get_admin_principals : () -> (vec principal) query;
  get_all_bets : (nat64, nat64, bool) -> (vec BetWithMarket) query;
  get_all_categories : () -> (vec text) query;
  get_all_markets : () -> (vec Market) query;
  get_balance : (principal) -> (nat) query;
  get_fee_balance : () -> (GetFeeBalanceResult) query;
  get_market : (nat) -> (opt Market) query;
  get_market_bets : (nat) -> (vec Bet) query;
  get_markets_by_status : () -> (MarketsByStatus) query;
  get_user_history : (principal) -> (UserHistory) query;
  icrc21_canister_call_consent_message : (ICRC21ConsentMessageRequest) -> (
      ICRC21ConsentMessageResponse,
    ) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse) query;
  icrc_34_delegate : (DelegationRequest) -> (Result_2);
  icrc_34_get_delegation : (DelegationRequest) -> (Result_2) query;
  icrc_34_revoke_delegation : (RevokeDelegationRequest) -> (Result_3);
  is_admin : (principal) -> (bool) query;
  place_bet : (nat, nat, nat) -> (Result_4);
  remove_admin : (principal) -> (Result);
  resolve_via_admin : (nat, vec nat) -> (Result_5);
  resolve_via_oracle : (nat, vec nat, blob) -> (Result_5);
}
