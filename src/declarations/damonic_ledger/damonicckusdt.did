type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxIndex__1 = nat;
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transfer = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from: Account;
   memo: opt blob;
   to: Account;
 };
type Transaction__1 = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TransactionRange = record {transactions: vec Transaction;};
type Transaction = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TokenInitArgs = 
 record {
   advanced_settings: opt AdvancedSettings;
   decimals: nat8;
   fee: Balance;
   initial_balances: vec record {
                           Account;
                           Balance;
                         };
   logo: text;
   max_supply: Balance;
   min_burn_amount: Balance;
   minting_account: opt Account;
   name: text;
   symbol: text;
 };
type Timestamp = nat64;
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Subaccount = blob;
type SetTextParameterResult = 
 variant {
   Err: SetParameterError;
   Ok: text;
 };
type SetParameterError = variant {
                           GenericError:
                            record {
                              error_code: nat;
                              message: text;
                            };};
type SetNat8ParameterResult = 
 variant {
   Err: SetParameterError;
   Ok: nat8;
 };
type SetBalanceParameterResult = 
 variant {
   Err: SetParameterError;
   Ok: Balance;
 };
type SetAccountParameterResult = 
 variant {
   Err: SetParameterError;
   Ok: Account;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type QueryArchiveFn = func (GetTransactionsRequest__1) ->
                       (TransactionRange) query;
type Mint__1 = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type Mint = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type MetaDatum = 
 record {
   text;
   Value;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedTransaction;
   first_index: TxIndex;
   log_length: nat;
   transactions: vec Transaction;
 };
type GetTransactionsRequest__1 = 
 record {
   length: nat;
   start: TxIndex;
 };
type GetTransactionsRequest = 
 record {
   length: nat;
   start: TxIndex;
 };
type BurnArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from_subaccount: opt Subaccount;
   memo: opt blob;
 };
type Burn = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from: Account;
   memo: opt blob;
 };
type Balance__1 = nat;
type Balance = nat;
type ArchivedTransaction = 
 record {
   callback: QueryArchiveFn;
   length: nat;
   start: TxIndex;
 };
type ArchiveInterface__1 = 
 service {
   append_transactions: (vec Transaction) -> (Result);
   get_first_tx: () -> (nat) query;
   get_last_tx: () -> (nat) query;
   get_next_archive: () -> (ArchiveInterface__1) query;
   get_prev_archive: () -> (ArchiveInterface__1) query;
   get_transaction: (TxIndex) -> (opt Transaction) query;
   get_transactions: (GetTransactionsRequest__1) -> (TransactionRange) query;
   max_memory: () -> (nat) query;
   remaining_capacity: () -> (nat) query;
   set_first_tx: (nat) -> (Result);
   set_last_tx: (nat) -> (Result);
   set_next_archive: (ArchiveInterface__1) -> (Result);
   set_prev_archive: (ArchiveInterface__1) -> (Result);
   total_transactions: () -> (nat) query;
   total_used: () -> (nat) query;
 };
type ArchiveInterface = 
 service {
   append_transactions: (vec Transaction) -> (Result);
   get_first_tx: () -> (nat) query;
   get_last_tx: () -> (nat) query;
   get_next_archive: () -> (ArchiveInterface__1) query;
   get_prev_archive: () -> (ArchiveInterface__1) query;
   get_transaction: (TxIndex) -> (opt Transaction) query;
   get_transactions: (GetTransactionsRequest__1) -> (TransactionRange) query;
   max_memory: () -> (nat) query;
   remaining_capacity: () -> (nat) query;
   set_first_tx: (nat) -> (Result);
   set_last_tx: (nat) -> (Result);
   set_next_archive: (ArchiveInterface__1) -> (Result);
   set_prev_archive: (ArchiveInterface__1) -> (Result);
   total_transactions: () -> (nat) query;
   total_used: () -> (nat) query;
 };
type AdvancedSettings = 
 record {
   burned_tokens: Balance;
   permitted_drift: Timestamp;
   transaction_window: Timestamp;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  burn: (BurnArgs) -> (TransferResult);
  deposit_cycles: () -> ();
  get_archive: () -> (ArchiveInterface) query;
  get_archive_stored_txs: () -> (nat) query;
  get_total_tx: () -> (nat) query;
  get_transaction: (TxIndex__1) -> (opt Transaction__1);
  get_transactions: (GetTransactionsRequest) ->
   (GetTransactionsResponse) query;
  icrc1_balance_of: (Account__1) -> (Balance__1) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (Balance__1) query;
  icrc1_metadata: () -> (vec MetaDatum) query;
  icrc1_minting_account: () -> (opt Account__1) query;
  icrc1_name: () -> (text) query;
  icrc1_supported_standards: () -> (vec SupportedStandard) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (Balance__1) query;
  icrc1_transfer: (TransferArgs) -> (TransferResult);
  min_burn_amount: () -> (Balance__1) query;
  mint: (Mint) -> (TransferResult);
  set_decimals: (nat8) -> (SetNat8ParameterResult);
  set_fee: (Balance__1) -> (SetBalanceParameterResult);
  set_logo: (text) -> (SetTextParameterResult);
  set_min_burn_amount: (Balance__1) -> (SetBalanceParameterResult);
  set_minting_account: (text) -> (SetAccountParameterResult);
  set_name: (text) -> (SetTextParameterResult);
  set_symbol: (text) -> (SetTextParameterResult);
}
