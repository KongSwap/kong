type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxnResult = 
 variant {
   err:
    record {
      code:
       variant {
         DuplicateExecutedTransfer;
         InsufficientAllowance;
         InsufficientBalance;
         InsufficientGas;
         LockedTransferExpired;
         NoLockedTransfer;
         NonceError;
         UndefinedError;
       };
      message: text;
    };
   ok: Txid__1;
 };
type TxnRecord__2 = 
 record {
   caller: AccountId__2;
   gas: Gas__2;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time__2;
   transaction: Transaction__1;
   txid: Txid__3;
 };
type TxnRecord__1 = 
 record {
   caller: AccountId__1;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time__1;
   transaction: Transaction;
   txid: Txid__1;
 };
type TxnRecord = 
 record {
   caller: AccountId__1;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time__1;
   transaction: Transaction;
   txid: Txid__1;
 };
type TxnQueryResponse = 
 variant {
   getEvents: vec TxnRecord__1;
   getTxn: opt TxnRecord__1;
   lastTxids: vec Txid__1;
   lastTxidsGlobal: vec Txid__1;
   lockedTxns: record {
                 lockedBalance: nat;
                 txns: vec TxnRecord__1;
               };
   txnCount: nat;
   txnCountGlobal: nat;
 };
type TxnQueryRequest = 
 variant {
   getEvents: record {owner: opt Address;};
   getTxn: record {txid: Txid__1;};
   lastTxids: record {owner: Address;};
   lastTxidsGlobal;
   lockedTxns: record {owner: Address;};
   txnCount: record {owner: Address;};
   txnCountGlobal;
 };
type Txid__3 = blob;
type Txid__2 = blob;
type Txid__1 = blob;
type Txid = blob;
type TxReceipt = 
 variant {
   Err:
    variant {
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other: text;
      Unauthorized;
    };
   Ok: nat;
 };
type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: nat;};
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferFromArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   fee: opt nat;
   from: Account;
   memo: opt blob;
   spender_subaccount: opt blob;
   to: Account;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   fee: opt nat;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transaction__1 = 
 record {
   data: opt blob;
   from: AccountId__2;
   operation: Operation__1;
   to: AccountId__2;
   value: nat;
 };
type Transaction = 
 record {
   data: opt blob;
   from: AccountId__1;
   operation: Operation;
   to: AccountId__1;
   value: nat;
 };
type TokenInfo = 
 record {
   cycles: nat;
   deployTime: Time;
   feeTo: principal;
   historySize: nat;
   holderNumber: nat;
   metadata: Metadata__2;
 };
type To = text;
type Timestamp = nat64;
type Timeout = nat32;
type Time__2 = int;
type Time__1 = int;
type Time = int;
type Subscription = 
 record {
   callback: Callback;
   msgTypes: vec MsgType;
 };
type Subaccount = blob;
type Spender = text;
type Setting__1 = 
 record {
   EN_DEBUG: bool;
   MAX_CACHE_NUMBER_PER: nat;
   MAX_CACHE_TIME: nat;
   MAX_STORAGE_TRIES: nat;
 };
type Setting = record {MAX_PUBLICATION_TRIES: nat;};
type Sa = vec nat8;
type Operation__1 = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid__3;
                    };
   lockTransfer:
    record {
      decider: AccountId__2;
      expiration: Time__2;
      locked: nat;
    };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid__1;
                    };
   lockTransfer:
    record {
      decider: AccountId__1;
      expiration: Time__1;
      locked: nat;
    };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Nonce = nat;
type MsgType__1 = 
 variant {
   onApprove;
   onExecute;
   onLock;
   onTransfer;
 };
type MsgType = 
 variant {
   onApprove;
   onExecute;
   onLock;
   onTransfer;
 };
type Metadata__2 = 
 record {
   decimals: nat8;
   fee: nat;
   logo: text;
   name: text;
   owner: principal;
   symbol: text;
   totalSupply: nat;
 };
type Metadata__1 = 
 record {
   content: text;
   name: text;
 };
type Metadata = 
 record {
   content: text;
   name: text;
 };
type InitArgs = 
 record {
   decimals: nat8;
   fee: nat;
   founder: opt Address;
   metadata: opt vec Metadata;
   name: opt text;
   symbol: opt text;
   totalSupply: nat;
 };
type Gas__2 = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type Gas__1 = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type From = text;
type ExecuteType = 
 variant {
   fallback;
   send: nat;
   sendAll;
 };
type Decider = text;
type Data = blob;
type DRC207Support = 
 record {
   cycles_receivable: bool;
   monitorable_by_blackhole:
    record {
      allowed: bool;
      canister_id: opt principal;
    };
   monitorable_by_self: bool;
   timer: record {
            enable: bool;
            interval_seconds: opt nat;
          };
 };
type Config__2 = 
 record {
   EN_DEBUG: opt bool;
   MAX_CACHE_NUMBER_PER: opt nat;
   MAX_CACHE_TIME: opt nat;
   MAX_STORAGE_TRIES: opt nat;
 };
type Config__1 = record {MAX_PUBLICATION_TRIES: opt nat;};
type Config = record {feeTo: opt Address__2;};
type CoinSeconds = 
 record {
   coinSeconds: nat;
   updateTime: int;
 };
type Callback__1 = func (TxnRecord__1) -> ();
type Callback = func (TxnRecord__1) -> ();
type ApproveError = 
 variant {
   AllowanceChanged: record {current_allowance: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   Expired: record {ledger_time: nat64;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type ApproveArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   expected_allowance: opt nat;
   expires_at: opt nat64;
   fee: opt nat;
   from_subaccount: opt blob;
   memo: opt blob;
   spender: Account;
 };
type Amount = nat;
type AllowanceArgs = 
 record {
   account: Account;
   spender: Account;
 };
type Allowance = 
 record {
   remaining: nat;
   spender: AccountId__1;
 };
type Address__3 = text;
type Address__2 = text;
type Address__1 = text;
type Address = text;
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type AccountId__2 = blob;
type AccountId__1 = blob;
type AccountId = blob;
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  allowance: (principal, principal) -> (nat) query;
  approve: (principal, nat) -> (TxReceipt);
  balanceOf: (principal) -> (nat) query;
  decimals: () -> (nat8) query;
  drc202_canisterId: () -> (principal) query;
  drc202_config: (Config__2) -> (bool);
  drc202_events: (opt Address__3) -> (vec TxnRecord__2) query;
  drc202_events_filter: (opt Address__3, opt Time, opt Time) ->
   (vec TxnRecord__2, bool) query;
  drc202_getConfig: () -> (Setting__1) query;
  drc202_pool: () -> (vec record {
                            Txid__2;
                            nat;
                          }) query;
  drc202_txn: (Txid__2) -> (opt TxnRecord__2) query;
  drc202_txn2: (Txid__2) -> (opt TxnRecord__2);
  drc207: () -> (DRC207Support) query;
  drc20_allowance: (Address__1, Spender) -> (Amount) query;
  drc20_approvals: (Address__1) -> (vec Allowance) query;
  drc20_approve: (Spender, Amount, opt Nonce, opt Sa, opt Data) ->
   (TxnResult);
  drc20_balanceOf: (Address__1) -> (Amount) query;
  drc20_decimals: () -> (nat8) query;
  drc20_dropAccount: (opt Sa) -> (bool);
  drc20_executeTransfer: (Txid, ExecuteType, opt To, opt Nonce, opt Sa,
   opt Data) -> (TxnResult);
  drc20_fee: () -> (Amount) query;
  drc20_gas: () -> (Gas__1) query;
  drc20_getCoinSeconds: (opt Address__1) -> (CoinSeconds,
   opt CoinSeconds) query;
  drc20_holdersCount: () -> (nat, nat, nat) query;
  drc20_lockTransfer: (To, Amount, Timeout, opt Decider, opt Nonce, opt Sa,
   opt Data) -> (TxnResult);
  drc20_lockTransferFrom: (From, To, Amount, Timeout, opt Decider, opt Nonce,
   opt Sa, opt Data) -> (TxnResult);
  drc20_metadata: () -> (vec Metadata__1) query;
  drc20_name: () -> (text) query;
  drc20_subscribe: (Callback__1, vec MsgType__1, opt Sa) -> (bool);
  drc20_subscribed: (Address__1) -> (opt Subscription) query;
  drc20_symbol: () -> (text) query;
  drc20_totalSupply: () -> (Amount) query;
  drc20_transfer: (To, Amount, opt Nonce, opt Sa, opt Data) -> (TxnResult);
  drc20_transferBatch: (vec To, vec Amount, opt Nonce, opt Sa, opt Data) ->
   (vec TxnResult);
  drc20_transferFrom: (From, To, Amount, opt Nonce, opt Sa, opt Data) ->
   (TxnResult);
  drc20_txnQuery: (TxnQueryRequest) -> (TxnQueryResponse) query;
  drc20_txnRecord: (Txid) -> (opt TxnRecord);
  getMetadata: () -> (Metadata__2) query;
  getTokenFee: () -> (nat) query;
  getTokenInfo: () -> (TokenInfo) query;
  historySize: () -> (nat) query;
  icpubsub_config: (Config__1) -> (bool);
  icpubsub_getConfig: () -> (Setting) query;
  icrc1_balance_of: (Account__1) -> (nat) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (nat) query;
  icrc1_metadata: () -> (vec record {
                               text;
                               Value;
                             }) query;
  icrc1_minting_account: () -> (opt Account__1) query;
  icrc1_name: () -> (text) query;
  icrc1_supported_standards: () -> (vec record {
                                          name: text;
                                          url: text;
                                        }) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (nat) query;
  icrc1_transfer: (TransferArgs) -> (variant {
                                       Err: TransferError;
                                       Ok: nat;
                                     });
  icrc2_allowance: (AllowanceArgs) ->
   (record {
      allowance: nat;
      expires_at: opt nat64;
    }) query;
  icrc2_approve: (ApproveArgs) -> (variant {
                                     Err: ApproveError;
                                     Ok: nat;
                                   });
  icrc2_transfer_from: (TransferFromArgs) ->
   (variant {
      Err: TransferFromError;
      Ok: nat;
    });
  ictokens_clearSnapshot: () -> (bool);
  ictokens_config: (Config) -> (bool);
  ictokens_getConfig: () -> (Config) query;
  ictokens_getSnapshot: (nat, nat) -> (Time, vec record {
                                                   AccountId;
                                                   nat;
                                                 }, bool) query;
  ictokens_heldFirstTime: (Address__1) -> (opt Time) query;
  ictokens_maxSupply: () -> (opt nat) query;
  ictokens_setFee: (Amount) -> (bool);
  ictokens_setMetadata: (vec Metadata__1) -> (bool);
  ictokens_snapshot: (Amount) -> (bool);
  ictokens_snapshotBalanceOf: (nat, Address__1) -> (Time, opt nat) query;
  ictokens_top100: () -> (vec record {
                                Address__1;
                                nat;
                              }) query;
  logo: () -> (text) query;
  name: () -> (text) query;
  standard: () -> (text) query;
  symbol: () -> (text) query;
  totalSupply: () -> (nat) query;
  transfer: (principal, nat) -> (TxReceipt);
  transferFrom: (principal, principal, nat) -> (TxReceipt);
  wallet_receive: () -> ();
}
