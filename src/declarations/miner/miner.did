type BlockTemplate = record {
  height : nat64;
  difficulty : nat32;
  prev_hash : blob;
  version : nat32;
  merkle_root : blob;
  target : blob;
  nonce : nat64;
  timestamp : nat64;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type MinerInfo = record {
  speed_percentage : nat16;
  current_token : opt principal;
  chunk_size : nat64;
  is_mining : bool;
};
type MinerInitArgs = record {
  pow_backend : principal;
  owner : principal;
  launchpad : principal;
};
type MiningResult = record {
  miner : principal;
  solution_hash : blob;
  nonce : nat64;
  timestamp : nat64;
  block_height : nat64;
};
type MiningStats = record {
  total_hashes : nat64;
  blocks_mined : nat64;
  total_rewards : nat64;
  last_hash_rate : float64;
  start_time : nat64;
};
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : MinerInfo; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
service : (MinerInitArgs) -> {
  claim_rewards : () -> (Result);
  connect_token : (principal) -> (Result_1);
  disconnect_token : () -> (Result_1);
  find_solution_in_range : (BlockTemplate, nat64, nat64) -> (
      opt MiningResult,
    ) query;
  get_canister_id : () -> (principal) query;
  get_info : () -> (Result_2) query;
  get_mining_stats : () -> (MiningStats) query;
  get_remaining_hashes : () -> (nat) query;
  get_time_remaining_estimate : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  icrc1_version : () -> (text) query;
  set_chunk_size : (nat64) -> (Result_1);
  set_max_chunk_duration : (nat64) -> (Result_1);
  set_mining_speed : (nat16) -> (Result_1);
  start_mining : () -> (Result_1);
  stop_mining : () -> (Result_1);
  top_up : (nat) -> (Result_3);
}
e