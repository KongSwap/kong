type Account = record { owner : principal; subaccount : opt Subaccount };
type Allowance = record { allowance : nat; expires_at : opt Timestamp };
type AllowanceArgs = record { account : Account; spender : Account };
type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt Timestamp;
  spender : Account;
};
type ApproveArgs = record {
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt Timestamp;
  spender : Account;
};
type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : BlockIndex };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  Expired : record { ledger_time : Timestamp };
  InsufficientFunds : record { balance : nat };
};
type ApproveResult = variant { Ok : BlockIndex; Err : ApproveError };
type ArchiveInfo = record {
  block_range_end : BlockIndex;
  canister_id : principal;
  block_range_start : BlockIndex;
};
type Block = Value;
type BlockIndex = nat;
type BlockRange = record { blocks : vec Block };
type Burn = record {
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};
type ChangeArchiveOptions = record {
  num_blocks_to_archive : opt nat64;
  max_transactions_per_response : opt nat64;
  trigger_threshold : opt nat64;
  more_controller_ids : opt vec principal;
  max_message_size_bytes : opt nat64;
  cycles_for_archive_creation : opt nat64;
  node_max_memory_size_bytes : opt nat64;
  controller_id : opt principal;
};
type ChangeFeeCollector = variant { SetTo : Account; Unset };
type DataCertificate = record { certificate : opt blob; hash_tree : blob };
type Duration = nat64;
type FeatureFlags = record { icrc2 : bool };
type GetArchivesArgs = record { from : opt principal };
type GetArchivesResult = vec record {
  end : nat;
  canister_id : principal;
  start : nat;
};
type GetBlocksArgs = record { start : BlockIndex; length : nat };
type GetBlocksResponse = record {
  certificate : opt blob;
  first_index : BlockIndex;
  blocks : vec Block;
  chain_length : nat64;
  archived_blocks : vec record {
    callback : QueryBlockArchiveFn;
    start : BlockIndex;
    length : nat;
  };
};
type GetBlocksResult = record {
  log_length : nat;
  blocks : vec record { id : nat; block : ICRC3Value };
  archived_blocks : vec record {
    args : vec GetBlocksArgs;
    callback : func (vec GetBlocksArgs) -> (GetBlocksResult) query;
  };
};
type GetTransactionsRequest = record { start : TxIndex; length : nat };
type GetTransactionsResponse = record {
  first_index : TxIndex;
  log_length : nat;
  transactions : vec Transaction;
  archived_transactions : vec record {
    callback : QueryArchiveFn;
    start : TxIndex;
    length : nat;
  };
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type ICRC3DataCertificate = record { certificate : blob; hash_tree : blob };
type ICRC3Value = variant {
  Int : int;
  Map : vec record { text; ICRC3Value };
  Nat : nat;
  Blob : blob;
  Text : text;
  Array : vec ICRC3Value;
};
type InitArgs = record {
  decimals : opt nat8;
  token_symbol : text;
  transfer_fee : nat;
  metadata : vec record { text; MetadataValue };
  minting_account : Account;
  initial_balances : vec record { Account; nat };
  maximum_number_of_accounts : opt nat64;
  accounts_overflow_trim_quantity : opt nat64;
  fee_collector_account : opt Account;
  archive_options : record {
    num_blocks_to_archive : nat64;
    max_transactions_per_response : opt nat64;
    trigger_threshold : nat64;
    more_controller_ids : opt vec principal;
    max_message_size_bytes : opt nat64;
    cycles_for_archive_creation : opt nat64;
    node_max_memory_size_bytes : opt nat64;
    controller_id : principal;
  };
  max_memo_length : opt nat16;
  token_name : text;
  feature_flags : opt FeatureFlags;
};
type LedgerArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type Map = vec record { text; Value };
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type Mint = record {
  to : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
};
type QueryArchiveFn = func (GetTransactionsRequest) -> (TransactionRange) query;
type QueryBlockArchiveFn = func (GetBlocksArgs) -> (BlockRange) query;
type StandardRecord = record { url : text; name : text };
type Subaccount = blob;
type Timestamp = nat64;
type Tokens = nat;
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : Timestamp;
  transfer : opt Transfer;
};
type TransactionRange = record { transactions : vec Transaction };
type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : nat;
  spender : opt Account;
};
type TransferArg = record {
  to : Account;
  fee : opt Tokens;
  memo : opt blob;
  from_subaccount : opt Subaccount;
  created_at_time : opt Timestamp;
  amount : Tokens;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : Tokens };
  Duplicate : record { duplicate_of : BlockIndex };
  BadFee : record { expected_fee : Tokens };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  InsufficientFunds : record { balance : Tokens };
};
type TransferFromArgs = record {
  to : Account;
  fee : opt Tokens;
  spender_subaccount : opt Subaccount;
  from : Account;
  memo : opt blob;
  created_at_time : opt Timestamp;
  amount : Tokens;
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : Tokens };
  BadBurn : record { min_burn_amount : Tokens };
  Duplicate : record { duplicate_of : BlockIndex };
  BadFee : record { expected_fee : Tokens };
  CreatedInFuture : record { ledger_time : Timestamp };
  TooOld;
  InsufficientFunds : record { balance : Tokens };
};
type TransferFromResult = variant { Ok : BlockIndex; Err : TransferFromError };
type TransferResult = variant { Ok : BlockIndex; Err : TransferError };
type TxIndex = nat;
type UpgradeArgs = record {
  change_archive_options : opt ChangeArchiveOptions;
  token_symbol : opt text;
  transfer_fee : opt nat;
  metadata : opt vec record { text; MetadataValue };
  accounts_overflow_trim_quantity : opt nat64;
  change_fee_collector : opt ChangeFeeCollector;
  max_memo_length : opt nat16;
  token_name : opt text;
  feature_flags : opt FeatureFlags;
};
type Value = variant {
  Int : int;
  Map : Map;
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : vec Value;
};
type icrc21_consent_info = record {
  metadata : icrc21_consent_message_metadata;
  consent_message : icrc21_consent_message;
};
type icrc21_consent_message = variant {
  LineDisplayMessage : record { pages : vec record { lines : vec text } };
  GenericDisplayMessage : text;
};
type icrc21_consent_message_metadata = record {
  utc_offset_minutes : opt int16;
  language : text;
};
type icrc21_consent_message_request = record {
  arg : blob;
  method : text;
  user_preferences : icrc21_consent_message_spec;
};
type icrc21_consent_message_response = variant {
  Ok : icrc21_consent_info;
  Err : icrc21_error;
};
type icrc21_consent_message_spec = record {
  metadata : icrc21_consent_message_metadata;
  device_spec : opt variant {
    GenericDisplay;
    LineDisplay : record {
      characters_per_line : nat16;
      lines_per_page : nat16;
    };
  };
};
type icrc21_error = variant {
  GenericError : record { description : text; error_code : nat };
  InsufficientPayment : icrc21_error_info;
  UnsupportedCanisterCall : icrc21_error_info;
  ConsentMessageUnavailable : icrc21_error_info;
};
type icrc21_error_info = record { description : text };
service : {
  archives : () -> (vec ArchiveInfo) query;
  get_blocks : (GetBlocksArgs) -> (GetBlocksResponse) query;
  get_data_certificate : () -> (DataCertificate) query;
  get_transactions : (GetTransactionsRequest) -> (
      GetTransactionsResponse,
    ) query;
  icrc10_supported_standards : () -> (
      vec record { url : text; name : text },
    ) query;
  icrc1_balance_of : (Account) -> (Tokens) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (Tokens) query;
  icrc1_metadata : () -> (vec record { text; MetadataValue }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec StandardRecord) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (Tokens) query;
  icrc1_transfer : (TransferArg) -> (TransferResult);
  icrc21_canister_call_consent_message : (icrc21_consent_message_request) -> (
      icrc21_consent_message_response,
    );
  icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
  icrc2_approve : (ApproveArgs) -> (ApproveResult);
  icrc2_transfer_from : (TransferFromArgs) -> (TransferFromResult);
  icrc3_get_archives : (GetArchivesArgs) -> (GetArchivesResult) query;
  icrc3_get_blocks : (vec GetBlocksArgs) -> (GetBlocksResult) query;
  icrc3_get_tip_certificate : () -> (opt ICRC3DataCertificate) query;
  icrc3_supported_block_types : () -> (
      vec record { url : text; block_type : text },
    ) query;
}