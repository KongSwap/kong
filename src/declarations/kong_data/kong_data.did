type Icrc10SupportedStandards = record { 
    url : text;
    name : text;
};
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };

type TxId = variant {
    BlockIndex : nat;
    TransactionId : text;
};

type ICTransferReply = record {
    chain : text;
    symbol : text;
    is_send : bool;
    amount : nat;
    canister_id : text;
    block_index : nat;
};
type TransferReply = variant {
    IC : ICTransferReply;
};
type TransferIdReply = record {
    transfer_id : nat64;
    transfer : TransferReply
};

type TokenReply = variant {
    LP : LPTokenReply;
    IC : ICTokenReply;
};
type LPTokenReply = record {
    token_id : nat32;
    name : text;
    chain : text;
    symbol : text;
    pool_id_of : nat32;
    address : text;
    decimals : nat8;
    fee : nat;
    total_supply : nat;
    on_kong : bool;
};
type ICTokenReply = record {
    token_id : nat32;
    name : text;
    chain : text;
    symbol : text;
    canister_id : text;
    decimals : nat8;	
    fee : nat;
    icrc1 : bool;
    icrc2 : bool;
    icrc3 : bool;
    on_kong : bool;
};
type TokensResult = variant { Ok : vec TokenReply; Err : text };

type PoolsReply = record {
    pools : vec PoolReply;
    total_tvl : nat;
    total_24h_volume : nat;
    total_24h_lp_fee : nat;
    total_24h_num_swaps : nat;
};
type PoolReply = record {
    pool_id : nat32;
    name : text;
    symbol : text;
    chain_0 : text;
    symbol_0 : text;
    address_0 : text;
    balance_0 : nat;
    lp_fee_0 : nat;
    chain_1 : text;
    symbol_1 : text;
    address_1 : text;
    balance_1 : nat;
    lp_fee_1 : nat;
    price : float64;
    lp_fee_bps : nat8;
    on_kong : bool;             // flag indicating if displayed on Kong Swap
    tvl : nat;                  // USD value of TVL
    rolling_24h_volume : nat;   // USD value of rolling 24h volume
    rolling_24h_lp_fee : nat;   // USD value of rolling 24h LP fees
    rolling_24h_num_swaps : nat;
    rolling_24h_apy : float64;
    lp_token_symbol : text;
};
type PoolsResult = variant { Ok : PoolsReply; Err : text };

type AddPoolArgs = record {
    token_0 : text;
    amount_0 : nat;
    tx_id_0 : opt TxId;
    token_1 : text;
    amount_1 : nat;
    tx_id_1 : opt TxId;
    lp_fee_bps : opt nat8;
    on_kong : opt bool;
};
type AddPoolReply = record {
    tx_id : nat64;
    symbol : text;
    request_id : nat64;
    status : text;
    chain_0 : text;
    address_0 : text;
    symbol_0 : text;
    amount_0 : nat;
    chain_1 : text;
    address_1 : text;
    symbol_1 : text;
    amount_1 : nat;
    add_lp_token_amount : nat;
    lp_fee_bps : nat8;
    lp_token_symbol : text;
    transfer_ids : vec TransferIdReply;
    claim_ids : vec nat64;
    on_kong : bool;
    ts : nat64;
};

type AddLiquidityArgs = record {
    token_0 : text;
    amount_0 : nat;
    tx_id_0 : opt TxId;
    token_1 : text;
    amount_1 : nat;
    tx_id_1 : opt TxId;
};
type AddLiquidityReply = record {
    tx_id : nat64;
    symbol : text;
    request_id : nat64;
    status : text;
    chain_0 : text;
    address_0 : text;
    symbol_0 : text;
    amount_0 : nat;
    chain_1 : text;
    address_1 : text;
    symbol_1 : text;
    amount_1 : nat;
    add_lp_token_amount : nat;
    transfer_ids : vec TransferIdReply;
    claim_ids : vec nat64;
    ts : nat64;
};

type RemoveLiquidityArgs = record {
    token_0 : text;
    token_1 : text;
    remove_lp_token_amount : nat;
};
type RemoveLiquidityReply = record {
    tx_id : nat64;
    symbol : text;
    request_id : nat64;
    status : text;
    chain_0 : text;
    address_0 : text;
    symbol_0 : text;
    amount_0 : nat;
    lp_fee_0 : nat;
    chain_1 : text;
    address_1 : text;
    symbol_1 : text;
    amount_1 : nat;
    lp_fee_1 : nat;
    remove_lp_token_amount : nat;
    transfer_ids : vec TransferIdReply;
    claim_ids : vec nat64;
    ts : nat64;
};

type SwapArgs = record {
    pay_token : text;
    pay_amount : nat;
    pay_tx_id : opt TxId;
    receive_token : text;
    receive_amount : opt nat;
    receive_address : opt text;
    max_slippage : opt float64;
    referred_by : opt text;
};
type SwapTxReply = record {
    pool_symbol : text;
    pay_chain : text;
    pay_address : text;
    pay_symbol : text;
    pay_amount : nat;
    receive_chain : text;
    receive_address : text;
    receive_symbol : text;
    receive_amount : nat;
    price : float64;
    lp_fee : nat;
    gas_fee : nat;
    ts : nat64;
};
type SwapReply = record {
    tx_id : nat64;
    request_id : nat64;
    status : text;
    pay_chain : text;
    pay_address : text;
    pay_symbol : text;
    pay_amount : nat;
    receive_chain : text;
    receive_address : text;
    receive_symbol : text;
    receive_amount : nat;
    mid_price : float64;
    price : float64;
    slippage : float64;
    txs : vec SwapTxReply;
    transfer_ids : vec TransferIdReply;
    claim_ids : vec nat64;
    ts : nat64;
};

type TxsReply = variant {
    AddPool : AddPoolReply;
    AddLiquidity : AddLiquidityReply;
    RemoveLiquidity : RemoveLiquidityReply;
    Swap : SwapReply;
};
type TxsResult = variant { Ok : vec TxsReply; Err : text };

service : {
    // icrc1 standards
    icrc1_name : () -> (text) query;
    icrc10_supported_standards : () -> (vec Icrc10SupportedStandards) query;
    icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);

    // tokens(opt wildcard) - returns all tokens or wildcard search
    tokens : (opt text) -> (TokensResult) query;
    // pools(opt wildcard) - returns all pools or wildcard search
    pools : (opt text) -> (PoolsResult) query;

    // txs(opt principal_id, opt tx_id, opt token_id, opt num_txs) - returns transactions filtered by principal id, transaction id or token
    txs : (opt text, opt nat64, opt nat32, opt nat16) -> (TxsResult) query;
}
