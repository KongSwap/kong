type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type UserBalanceResponse = 
 record {
   account_id: text;
   distributed_amount: nat;
   mint_amount: nat;
   "principal": opt principal;
 };
type TxIndex__1 = nat;
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transfer = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from: Account;
   memo: opt blob;
   to: Account;
 };
type Transaction__1 = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TransactionRange = record {transactions: vec Transaction;};
type Transaction = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TokenInitArgs = 
 record {
   advanced_settings: opt AdvancedSettings;
   decimals: nat8;
   fee: Balance;
   initial_balances: vec record {
                           Account;
                           Balance;
                         };
   max_supply: Balance;
   min_burn_amount: Balance;
   minting_account: opt Account;
   name: text;
   symbol: text;
 };
type Timestamp = nat64;
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Subaccount = blob;
type Result_1 = 
 variant {
   err: text;
   ok: bool;
 };
type Result = 
 variant {
   err: text;
   ok: Page;
 };
type QueryArchiveFn = func (GetTransactionsRequest__1) ->
                       (TransactionRange) query;
type Page = 
 record {
   content: vec UserBalanceResponse;
   limit: nat;
   offset: nat;
   totalElements: nat;
 };
type MintStateResponse = 
 record {
   end_of_distribute: bool;
   end_of_sync: bool;
   latest_sync_tx_id: nat;
   valid_addresses: nat;
   valid_mint_amount: nat;
   valid_transactions: nat;
 };
type MintConfigResponse = 
 record {
   exchange_ratio: float64;
   max_mint_amount_per_address: nat;
   memo: text;
   min_tx_amount: nat;
   mint_token_gov_id: principal;
   mint_token_ledger_id: principal;
 };
type MintArgs = 
 record {
   exchange_ratio: float64;
   max_mint_amount_per_address: nat;
   min_tx_amount: nat;
   mint_memo: text;
 };
type Mint = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type MetaDatum = 
 record {
   text;
   Value;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedTransaction;
   first_index: TxIndex;
   log_length: nat;
   transactions: vec Transaction;
 };
type GetTransactionsRequest__1 = 
 record {
   length: nat;
   start: TxIndex;
 };
type GetTransactionsRequest = 
 record {
   length: nat;
   start: TxIndex;
 };
type BurnArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from_subaccount: opt Subaccount;
   memo: opt blob;
 };
type Burn = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from: Account;
   memo: opt blob;
 };
type Balance__1 = nat;
type Balance = nat;
type ArchivedTransaction = 
 record {
   callback: QueryArchiveFn;
   length: nat;
   start: TxIndex;
 };
type AdvancedSettings = 
 record {
   burned_tokens: Balance;
   permitted_drift: Timestamp;
   transaction_window: Timestamp;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  add_controller: (principal, principal) -> (Result_1);
  archive_id: () -> (principal) query;
  burn: (BurnArgs) -> (TransferResult);
  deposit_cycles: () -> ();
  get_transaction: (TxIndex__1) -> (opt Transaction__1);
  get_transactions: (GetTransactionsRequest) ->
   (GetTransactionsResponse) query;
  icrc1_balance_of: (Account__1) -> (Balance__1) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (Balance__1) query;
  icrc1_metadata: () -> (vec MetaDatum) query;
  icrc1_minting_account: () -> (opt Account__1) query;
  icrc1_name: () -> (text) query;
  icrc1_supported_standards: () -> (vec SupportedStandard) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (Balance__1) query;
  icrc1_transfer: (TransferArgs) -> (TransferResult);
  init: (opt MintArgs, opt text, opt principal, opt principal, opt nat) -> ();
  query_cycle_balance: () -> (nat);
  query_mint_config: () -> (MintConfigResponse) query;
  query_mint_statistics: () -> (MintStateResponse) query;
  query_user_valid_balance: (principal) -> (nat) query;
  query_users_valid_balance: (nat, nat) -> (Result) query;
}
